generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @unique @default(uuid())

  // core
  email    String @unique
  password String

  // security
  role String @default("")

  // subscription
  subscription String
  frequency    String

  // openai token usage
  lastTokenReset   DateTime @default(now())
  periodTokenUsage Int      @default(0)

  // stripe
  stripeCustomerId String @default("")

  // algolia
  algoliaApiKey String @default("")

  // collaboration
  memberOrganizations Organization[] @relation("MemberOrganizations")
  ownedOrganizations  Organization[] @relation("OwnerOrganizations")
  projects            Project[]

  // flows
  flows Flow[]

  // documents
  documents    Document[]
  documentTree Json?

  // presentations
  presentations     Presentation[]
  presentationFiles Json?

  // sheets
  sheets     Sheet[]
  sheetFiles Json?

  // drawings
  drawings     Drawing[]
  drawingFiles Json?

  // sounds
  sounds     Sound[]
  soundFiles Json?

  // videos
  videos     Video[]
  videoFiles Json?

  // feeds
  feeds    Feed[]
  feedTree Json?

  // launcher
  launcherContext Json?

  // relationships
  contacts  Contact[]
  companies Company[]
  dashboards Dashboard[]
  funnels    Funnel[]
  contactSettings  ContactSettings?
  companySettings  CompanySettings?

  // send email
  emailLogs EmailLog[]
  emailTemplates EmailTemplate[]
  domainSettings DomainSettings?
  emailDevelopersSettings EmailDevelopersSettings?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Flow {
  id String @id @unique @default(uuid())

  prompt String
  type   Type   @relation(fields: [typeId], references: [id])
  typeId String

  questionsContext Json?
  resultsContext   Json?

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Type {
  id String @id @unique @default(uuid())

  name String
  code String

  flows Flow[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Document {
  id String @id @unique @default(uuid())

  title     String
  content   Json?
  html      String?
  plaintext String?
  markdown  String?

  messages Json?

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Presentation {
  id String @id @unique @default(uuid())

  title   String
  context Json?

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model PresentationTemplate {
  id String @id @unique @default(uuid())

  sourceId String @unique // presentation id

  key     String @unique
  title   String
  context Json

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Sheet {
  id String @id @unique @default(uuid())

  title   String
  context Json?

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Drawing {
  id String @id @unique @default(uuid())

  title   String
  context Json?

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Sound {
  id String @id @unique @default(uuid())

  title   String
  context Json?

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Video {
  id String @id @unique @default(uuid())

  title   String
  context Json?

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Feed {
  id String @id @unique @default(uuid())

  url String

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Organization {
  id String @id @unique @default(uuid())

  name String

  users    User[]    @relation("MemberOrganizations")
  projects Project[]

  owner   User   @relation("OwnerOrganizations", fields: [ownerId], references: [id])
  ownerId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Project {
  id String @id @unique @default(uuid())

  title String

  documentTree      Json?
  presentationFiles Json?
  sheetFiles        Json?
  drawingFiles      Json?
  soundFiles        Json?
  videoFiles        Json?
  feedTree          Json?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Relationships

model Contact {
  id String @id @unique @default(uuid())

  fields Json?

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model ContactSettings {
  id String @id @unique @default(uuid())

  fields Json?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Company {
  id String @id @unique @default(uuid())

  fields Json?

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model CompanySettings {
  id String @id @unique @default(uuid())

  fields Json?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())  
}

model Dashboard {
  id String @id @unique @default(uuid())

  title  String
  context Json?

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Funnel {
  id String @id @unique @default(uuid())

  title  String
  context Json?

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Send Email

model EmailLog {
  id String @id @unique @default(uuid())

  from    String
  to      String

  // status   String @default("pending")

  template EmailTemplate @relation(fields: [templateId], references: [id])
  templateId String

  sender User   @relation(fields: [senderId], references: [id])
  senderId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model EmailTemplate {
  id String @id @unique @default(uuid())

  title    String
  context Json?

  logs EmailLog[]

  creator  User   @relation(fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model DomainSettings {
  id String @id @unique @default(uuid())

  domainName String @unique
  dkimData Json?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model EmailDevelopersSettings {
  id String @id @unique @default(uuid())

  apiKey String @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
