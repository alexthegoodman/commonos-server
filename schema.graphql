### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Company {
  createdAt: DateTime
  creator: User
  fields: JSON
  id: String
  updatedAt: DateTime
}

type CompanySettings {
  createdAt: DateTime
  fields: JSON
  id: String
  updatedAt: DateTime
  user: User
}

type Contact {
  createdAt: DateTime
  creator: User
  fields: JSON
  id: String
  updatedAt: DateTime
}

type ContactSettings {
  createdAt: DateTime
  fields: JSON
  id: String
  updatedAt: DateTime
  user: User
}

type ContentDevelopersSettings {
  apiKey: String
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  user: User
}

type Dashboard {
  context: JSON
  createdAt: DateTime
  creator: User
  id: String
  title: String
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Document {
  content: JSON
  createdAt: DateTime
  creator: User
  html: String
  id: String
  markdown: String
  messages: JSON
  plaintext: String
  title: String
  updatedAt: DateTime
}

type DomainSettings {
  createdAt: DateTime
  dkimData: JSON
  domainName: String
  id: String
  updatedAt: DateTime
  user: User
}

type Drawing {
  context: JSON
  createdAt: DateTime
  creator: User
  id: String
  title: String
  updatedAt: DateTime
}

type Email {
  archived: Boolean
  body: String
  createdAt: DateTime
  draft: Boolean
  from: String
  id: String
  initialMarkdown: String
  subject: String
  thread: Thread
  to: String
  unread: Boolean
  updatedAt: DateTime
}

type EmailLog {
  createdAt: DateTime
  from: String
  id: String
  sender: User
  template: User
  to: String
  updatedAt: DateTime
}

type EmailTemplate {
  context: JSON
  createdAt: DateTime
  creator: User
  id: String
  logs: [User]
  title: String
  updatedAt: DateTime
}

type Feed {
  createdAt: DateTime
  creator: User
  id: String
  updatedAt: DateTime
  url: String
}

type Flow {
  createdAt: DateTime
  id: String
  prompt: String
  questionsContext: JSON
  resultsContext: JSON
  type: Type
  updatedAt: DateTime
}

type Funnel {
  context: JSON
  createdAt: DateTime
  creator: User
  id: String
  title: String
  updatedAt: DateTime
}

type Inbox {
  createdAt: DateTime
  domain: DomainSettings
  id: String
  threads: [Thread]
  updatedAt: DateTime
  username: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Link {
  createdAt: DateTime
  description: String
  title: String
  updatedAt: DateTime
  url: String
}

type Mutation {
  createCompany(fields: String!): Company
  createContact(fields: String!): Contact
  createDashboard: Dashboard
  createEmailTemplate: EmailTemplate
  createFile(fileId: String!, flowId: String!, prompt: String!): String
  createFlow(prompt: String!, typeCode: String!): Flow
  createFunnel: Funnel
  createInbox(username: String!): Inbox
  createOrganization(name: String!): Organization
  createPost(fields: String, markdown: String!, postTypeId: String!, title: String!): Post
  createPostType(fields: String!, name: String!): PostType
  createProject(organizationId: String!, title: String!): Project
  deleteCompany(companyId: String!): String
  deleteContact(contactId: String!): String
  deleteDocument(documentId: String!): String
  deleteDomainSettings: String
  deleteEmailTemplate(emailTemplateId: String!): String
  deletePost(postId: String!): String
  export(html: String!, type: String!): String
  generateContentApiKey: ContentDevelopersSettings
  generateTitles(treeMd: String!): [Document]
  markAsRead(emailId: String!): Email
  newCheckout: String
  newDocument: Document
  newDrawing: Drawing
  newFeed(url: String!): Feed
  newPresentation: Presentation
  newPresentationTemplate(context: String!, sourceId: String!, title: String!): PresentationTemplate
  newSheet: Sheet
  newSound: Sound
  newVideo: Video
  putCompanySettings(fields: String!): String
  putContactSettings(fields: String!): String
  putDomainSettings(domainName: String!): DomainSettings
  registerUser: String!
  sendWorkEmail(body: String!, inboxId: String!, subject: String!, threadId: String, to: String!): Email
  simpleUpload(fileData: String, fileName: String, fileSize: Int, fileType: String): JSON
  togglePublished(postId: String!): Post
  updateCompany(companyId: String!, fields: String!): Company
  updateContact(contactId: String!, fields: String!): Contact
  updateDashboard(context: String, dashboardId: String!, title: String): Dashboard
  updateDocument(content: String, documentId: String!, html: String, markdown: String, messages: String, plaintext: String, title: String): Document
  updateDrawing(context: String, drawingId: String!, title: String): Drawing
  updateEmailTemplate(context: String, emailTemplateId: String!, title: String): EmailTemplate
  updateFlow(flowId: String!, questionsContext: String, resultsContext: String): Flow
  updateFunnel(context: String, funnelId: String!, title: String): Funnel
  updatePost(fields: String, markdown: String, postId: String!, title: String): Post
  updatePostType(fields: String, name: String, postTypeId: String!): Post
  updatePresentation(context: String, presentationId: String!, title: String): Presentation
  updatePresentationTemplate(context: String!, presentationTemplateId: String!): PresentationTemplate
  updateSheet(context: String, sheetId: String!, title: String): Sheet
  updateSound(context: String, soundId: String!, title: String): Sound
  updateUser(documentTree: String, drawingFiles: String, feedTree: String, presentationFiles: String, sheetFiles: String, soundFiles: String, videoFiles: String): User
  updateVideo(context: String, title: String, videoId: String!): Video
}

type Organization {
  createdAt: DateTime
  id: String
  name: String
  owner: User
  projects: [Project]
  updatedAt: DateTime
  users: [User]
}

type Post {
  createdAt: DateTime
  creator: User
  fields: JSON
  id: String
  markdown: String
  published: Boolean
  title: String
  type: PostType
  updatedAt: DateTime
}

type PostType {
  createdAt: DateTime
  creator: User
  fields: JSON
  id: String
  name: String
  posts: [Post]
  updatedAt: DateTime
}

type Presentation {
  context: JSON
  createdAt: DateTime
  creator: User
  id: String
  title: String
  updatedAt: DateTime
}

type PresentationTemplate {
  context: JSON
  createdAt: DateTime
  id: String
  key: String
  sourceId: String
  title: String
  updatedAt: DateTime
}

type Project {
  createdAt: DateTime
  creator: User
  id: String
  organization: Organization
  title: String
  updatedAt: DateTime
}

type Query {
  authenticate: String
  company(companyId: String!): Company
  contact(contactId: String!): Contact
  contactsByIds(ids: [String!]!): [Contact]
  countCompanies: Int
  countContacts: Int
  countPosts(postTypeId: String!): Int
  dashboard(dashboardId: String!): Dashboard
  document(documentId: String!): Document
  drawing(drawingId: String!): Drawing
  emailTemplate(emailTemplateId: String!): EmailTemplate
  flow(flowId: String!): Flow
  funnel(funnelId: String!): Funnel
  getCurrentUser: User
  getFileList(flowId: String!): JSON
  getGeneratedText(contextText: String!): String
  getGuideQuestions(fileApp: String!, fileTitle: String!, sectionContent: String!): JSON
  getPortalUrl: String
  getQuestions(fileApp: String!, fileTitle: String!, flowId: String!, getThis: String!): JSON
  getRSSData(url: String!): [JSON]
  getRevisedContent(fileApp: String!, fileTitle: String!, sectionContent: String!, sectionQuestions: String!): JSON
  inbox(inboxId: String!): Inbox
  myCompanies(skip: Int!, take: Int!): [Company]
  myCompanySettings: CompanySettings
  myContactSettings: ContactSettings
  myContacts(skip: Int!, take: Int!): [Contact]
  myContentDevelopersSettings: ContentDevelopersSettings
  myDashboards: [Dashboard]
  myDocuments: [Document]
  myDomainSettings: DomainSettings
  myDrawings: [Drawing]
  myEmailLogs(skip: Int!, take: Int!): [EmailLog]
  myEmailTemplates(skip: Int!, take: Int!): [EmailTemplate]
  myFeeds: [Feed]
  myFlows: [Flow]
  myFunnels: [Funnel]
  myInboxEmailThreads(inboxId: String!): [Thread]
  myInboxes: [Inbox]
  myOrganizations: [Organization]
  myPostTypes: [PostType]
  myPosts(postTypeId: String!): [Post]
  myPresentations: [Presentation]
  mySheets: [Sheet]
  mySounds: [Sound]
  myThreadEmails(threadId: String!): [Email]
  myVideos: [Video]
  post(postId: String!): Post
  postType(postTypeId: String!): PostType
  presentation(presentationId: String!): Presentation
  presentationTemplates: [PresentationTemplate]
  sheet(sheetId: String!): Sheet
  sound(soundId: String!): Sound
  video(videoId: String!): Video
  visualData(field: String!, item: String!): [JSON]
}

type Sheet {
  context: JSON
  createdAt: DateTime
  creator: User
  id: String
  title: String
  updatedAt: DateTime
}

type Sound {
  context: JSON
  createdAt: DateTime
  creator: User
  id: String
  title: String
  updatedAt: DateTime
}

type Thread {
  createdAt: DateTime
  emails: [Email]
  id: String
  inbox: Inbox
  mostRecentEmail: Email
  subject: String
  updatedAt: DateTime
}

type Type {
  code: String
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type User {
  algoliaApiKey: String
  createdAt: DateTime
  documentTree: JSON
  documents: [Document]
  drawingFiles: JSON
  email: String
  feedTree: JSON
  frequency: String
  lastTokenReset: DateTime
  periodTokenUsage: Int
  presentationFiles: JSON
  role: String
  sheetFiles: JSON
  soundFiles: JSON
  subscription: String
  updatedAt: DateTime
  videoFiles: JSON
}

type Video {
  context: JSON
  createdAt: DateTime
  creator: User
  id: String
  title: String
  updatedAt: DateTime
}