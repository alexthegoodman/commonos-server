### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Document {
  content: JSON
  createdAt: DateTime
  creator: User
  html: String
  id: String
  markdown: String
  messages: JSON
  plaintext: String
  title: String
  updatedAt: DateTime
}

type Drawing {
  context: JSON
  createdAt: DateTime
  creator: User
  id: String
  title: String
  updatedAt: DateTime
}

type Feed {
  createdAt: DateTime
  creator: User
  id: String
  updatedAt: DateTime
  url: String
}

type Flow {
  createdAt: DateTime
  id: String
  prompt: String
  questionsContext: JSON
  resultsContext: JSON
  type: Type
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Link {
  createdAt: DateTime
  description: String
  title: String
  updatedAt: DateTime
  url: String
}

type Mutation {
  createFile(fileId: String!, flowId: String!, prompt: String!): String
  createFlow(prompt: String!, typeCode: String!): Flow
  createOrganization(name: String!): Organization
  createProject(organizationId: String!, title: String!): Project
  deleteDocument(documentId: String!): String
  export(html: String!, type: String!): String
  generateTitles(treeMd: String!): [Document]
  newDocument: Document
  newDrawing: Drawing
  newFeed(url: String!): Feed
  newPresentation: Presentation
  newPresentationTemplate(context: String!, sourceId: String!, title: String!): PresentationTemplate
  newSheet: Sheet
  newSound: Sound
  newVideo: Video
  registerUser: String!
  simpleUpload(fileData: String, fileName: String, fileSize: Int, fileType: String): JSON
  updateDocument(content: String, documentId: String!, html: String, markdown: String, messages: String, plaintext: String, title: String): Document
  updateDrawing(context: String, drawingId: String!, title: String): Drawing
  updateFlow(flowId: String!, questionsContext: String, resultsContext: String): Flow
  updatePresentation(context: String, presentationId: String!, title: String): Presentation
  updatePresentationTemplate(context: String!, presentationTemplateId: String!): PresentationTemplate
  updateSheet(context: String, sheetId: String!, title: String): Sheet
  updateSound(context: String, soundId: String!, title: String): Sound
  updateUser(documentTree: String, drawingFiles: String, feedTree: String, presentationFiles: String, sheetFiles: String, soundFiles: String, videoFiles: String): User
  updateVideo(context: String, title: String, videoId: String!): Video
}

type Organization {
  createdAt: DateTime
  id: String
  name: String
  owner: User
  projects: [Project]
  updatedAt: DateTime
  users: [User]
}

type Presentation {
  context: JSON
  createdAt: DateTime
  creator: User
  id: String
  title: String
  updatedAt: DateTime
}

type PresentationTemplate {
  context: JSON
  createdAt: DateTime
  id: String
  key: String
  sourceId: String
  title: String
  updatedAt: DateTime
}

type Project {
  createdAt: DateTime
  creator: User
  id: String
  organization: Organization
  title: String
  updatedAt: DateTime
}

type Query {
  authenticate: String
  document(documentId: String!): Document
  drawing(drawingId: String!): Drawing
  flow(flowId: String!): Flow
  getCurrentUser: User
  getFileList(flowId: String!, getThis: String!): JSON
  getGeneratedText(contextText: String!): String
  getGuideQuestions(fileApp: String!, fileTitle: String!, sectionContent: String!): JSON
  getQuestions(fileApp: String!, fileTitle: String!, flowId: String!, getThis: String!): JSON
  getRSSData(url: String!): [JSON]
  getRevisedContent(fileApp: String!, fileTitle: String!, sectionContent: String!, sectionQuestions: String!): JSON
  myDocuments: [Document]
  myDrawings: [Drawing]
  myFeeds: [Feed]
  myFlows: [Flow]
  myPresentations: [Presentation]
  mySheets: [Sheet]
  mySounds: [Sound]
  myVideos: [Video]
  presentation(presentationId: String!): Presentation
  presentationTemplates: [PresentationTemplate]
  sheet(sheetId: String!): Sheet
  sound(soundId: String!): Sound
  video(videoId: String!): Video
}

type Sheet {
  context: JSON
  createdAt: DateTime
  creator: User
  id: String
  title: String
  updatedAt: DateTime
}

type Sound {
  context: JSON
  createdAt: DateTime
  creator: User
  id: String
  title: String
  updatedAt: DateTime
}

type Type {
  code: String
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type User {
  createdAt: DateTime
  documentTree: JSON
  documents: [Document]
  drawingFiles: JSON
  email: String
  feedTree: JSON
  frequency: String
  lastTokenReset: DateTime
  periodTokenUsage: Int
  presentationFiles: JSON
  role: String
  sheetFiles: JSON
  soundFiles: JSON
  subscription: String
  updatedAt: DateTime
  videoFiles: JSON
}

type Video {
  context: JSON
  createdAt: DateTime
  creator: User
  id: String
  title: String
  updatedAt: DateTime
}